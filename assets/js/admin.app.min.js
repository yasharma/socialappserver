'use strict';

var mimicTrading = angular.module('mimicTrading', ['ui.router', 'ngAnimate', 'ngMessages', 'ngFileUpload', 'LocalStorageModule', 'ui.bootstrap', 'oc.lazyLoad', 'ngSanitize', 'angular-ladda', 'ui.mask', 'textAngular']);
'use strict';

/* Application config */
/*Angular interceptors are service factories that are registered with the $httpProvider */

mimicTrading.config(['$httpProvider', function ($httpProvider) {
    var interceptor = ['$q', '$rootScope', 'loginSrv', function ($q, $rootScope, loginSrv) {
        return {
            request: function request(config) {
                // TRUE (Authorization: Token 205468286028d2d9df99a2f8f7a423220ef44452)
                config.headers = config.headers || {};
                var token = loginSrv.getToken();

                if (token) {
                    config.headers.Authorization = 'Bearer ' + token;
                    loginSrv.isLogged = true;
                }
                return config;
            },

            requestError: function requestError(rejection) {
                return $q.reject(rejection);
            },

            response: function response(_response) {
                return _response || $q.when(_response);
            },

            // Revoke client authentication if 400 is received
            responseError: function responseError(rejection) {

                if ('onLine' in navigator) {
                    if (!navigator.onLine) {
                        $rootScope.$broadcast('server_error', { message: 'ERR_INTERNET_DISCONNECTED' });
                        return;
                    }
                }

                if (rejection.status === 401) {
                    if (rejection.data.errors.code === "invalid_token") {
                        $rootScope.$broadcast('server_error', { message: 'Your Session has been expired, please login again to continue.', status_code: 401 });
                        return;
                    }
                }

                if (rejection.status <= 0) {
                    $rootScope.$broadcast('server_error', { message: 'ERR_CONNECTION_REFUSED' });
                    return;
                }
                return $q.reject(rejection);
            }
        };
    }];

    $httpProvider.interceptors.push(interceptor);
}]).config(['$compileProvider', function ($compileProvider) {
    $compileProvider.debugInfoEnabled(false);
}]).config(['laddaProvider', function (laddaProvider) {
    laddaProvider.setOption({
        style: 'zoom-in'
    });
}]).config(['$ocLazyLoadProvider', function ($ocLazyLoadProvider) {
    $ocLazyLoadProvider.config({
        // global configs go here
    });
}]).config(['$qProvider', function ($qProvider) {
    $qProvider.errorOnUnhandledRejections(false);
}]).config(['localStorageServiceProvider', function (localStorageServiceProvider) {
    var hostname = window.location.hostname;
    var prefix;
    switch (hostname) {
        case 'localhost':
        case 'local.mimic.com':
            prefix = 'localAdmin';
            break;

        default:
            prefix = 'prodAdmin';
    }
    localStorageServiceProvider.setPrefix(prefix);
}]).run(['$location', '$rootScope', 'loginSrv', '$state', 'localStorageService', '$timeout', '$injector', 'notificationSvr', function ($location, $rootScope, loginSrv, $state, localStorageService, $timeout, $injector, notificationSvr) {

    $rootScope.$on("$stateChangeStart", function (event, toState, toParams, fromState, fromParams) {
        $rootScope.isPageLoading = true;
        $rootScope.server_error_message = '';
        if (toState.authenticate && !loginSrv.isLogged && !localStorageService.get('admin')) {
            loginSrv.isLogged = false;
            $state.go("login");
            event.preventDefault();
        } else {
            var token = localStorageService.get('token');
            if ($location.path() === '/' && token) {
                $location.path('/dashboard');
            }
        }
    });

    $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
        $rootScope.isPageLoading = false;
    });

    $rootScope.$on('$stateChangeError', function (event, toState, toParams, fromState, fromParams, error) {
        if (error.errors) {
            /**
             * This will help in resolve 500 state
             * without url change
             */
            var state = $injector.get('$state');
            state.go('500');
            App.alert({ type: 'danger', icon: 'warning', message: error.message, container: $rootScope.settings.errorContainer, place: 'prepend' });
            return $location.path();
        }
    });

    /* This will logout the admin from the application */
    $rootScope.clearToken = function () {
        localStorageService.remove('token');
        localStorageService.remove('admin');
        delete $rootScope.admin;
        loginSrv.isLogged = false;
        $state.go("login");
    };

    // Set the admin for entire application
    $rootScope.admin = localStorageService.get('admin');

    // If any global error occured
    $rootScope.$on('server_error', function (event, res) {
        if (res.status_code) {
            if (res.status_code === 401) {
                $rootScope.clearToken();
            }
        }
        $rootScope.server_error_message = res.message;
    });

    $rootScope.manageCount = function (data) {
        if (data) {
            $rootScope.notificationCount = data.records.count;
        } else {
            if ($rootScope.notificationCount > 0) {
                $rootScope.notificationCount -= 1;
            }
        }
    };

    $rootScope.goToNotificationUrl = function (data) {
        notificationSvr.markAsRead([data.id]).then(function (response) {
            $rootScope.manageCount();
            $location.path(data.url);
        }).catch(function (errors) {
            return App.alert({ type: 'danger', icon: 'warning', message: errors.message, container: $rootScope.settings.errorContainer, place: 'prepend' });
        });
    };
}]);
'use strict';
/* Setup App Main Controller */

mimicTrading.controller('AppController', ['$scope', '$rootScope', function ($scope, $rootScope) {
    $scope.$on('$viewContentLoaded', function () {
        App.initComponents(); // init core components
        //Layout.init(); //  Init entire layout(header, footer, sidebar, etc) on page load if the partials included in server side instead of loading with ng-include directive 
    });
}])

/***
Layout Partials.
By default the partials are loaded through AngularJS ng-include directive. In case they loaded in server side(e.g: PHP include function) then below partial 
initialization can be disabled and Layout.init() should be called on page load complete as explained above.
***/

/* Setup Layout Part - Header */
.controller('HeaderController', ['$scope', function ($scope) {
    $scope.$on('$includeContentLoaded', function () {
        Layout.initHeader(); // init header
    });
}])

/* Setup Layout Part - Sidebar */
.controller('SidebarController', ['$scope', '$state', function ($scope, $state) {
    $scope.$on('$includeContentLoaded', function () {
        Layout.initSidebar($state); // init sidebar
    });
}])

/* Setup Layout Part - Quick Sidebar */
.controller('QuickSidebarController', ['$scope', function ($scope) {
    $scope.$on('$includeContentLoaded', function () {
        setTimeout(function () {
            QuickSidebar.init(); // init quick sidebar        
        }, 2000);
    });
}])

/* Setup Layout Part - Sidebar */
.controller('PageHeadController', ['$scope', function ($scope) {
    $scope.$on('$includeContentLoaded', function () {
        Demo.init(); // init theme panel
    });
}])

/* Setup Layout Part - Theme Panel */
.controller('ThemePanelController', ['$scope', function ($scope) {
    $scope.$on('$includeContentLoaded', function () {
        Demo.init(); // init theme panel
    });
}])

/* Setup Layout Part - Footer */
.controller('FooterController', ['$scope', function ($scope) {
    $scope.$on('$includeContentLoaded', function () {
        Layout.initFooter(); // init footer
    });
}]).run(["$rootScope", "settings", "$state", function ($rootScope, settings, $state) {
    $rootScope.$state = $state; // state to be accessed from view
    $rootScope.$settings = settings; // state to be accessed from view
}]);
'use strict';

/* Application routes */

mimicTrading.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
	// the known route
	$urlRouterProvider.when('', '/');

	// For any unmatched url, send to 404
	//$urlRouterProvider.otherwise('/404');
	$urlRouterProvider.otherwise(function ($injector, $location) {
		var state = $injector.get('$state');
		state.go('404');
		return $location.path();
	});

	$stateProvider.state('login', {
		url: '/',
		controller: 'loginCtrl',
		templateUrl: 'login/views/login.html',
		authenticate: false,
		data: { pageTitle: 'Login' },
		resolve: {
			deps: ['$ocLazyLoad', function ($ocLazyLoad) {
				return $ocLazyLoad.load({
					name: 'mimicTrading',
					insertBefore: '#ng_load_plugins_before', // load the above css files before a LINK element with this ID. Dynamic CSS files must be loaded between core and theme css files
					files: ['/assets/css/admin-login-style.css']
				});
			}]
		}
	}).state('dashboard', {
		url: '/dashboard',
		controller: 'dashboardCtrl',
		templateUrl: 'dashboard/views/dashboard.html',
		data: { pageTitle: 'Dashboard', smallTitle: 'dashboard & statistics' },
		resolve: {
			deps: ['$ocLazyLoad', function ($ocLazyLoad) {
				return $ocLazyLoad.load({
					name: 'mimicTrading',
					insertBefore: '#ng_load_plugins_before', // load the above css files before a LINK element with this ID. Dynamic CSS files must be loaded between core and theme css files
					files: ['/assets/global/plugins/morris/morris.css', '/assets/global/plugins/morris/morris.min.js', '/assets/global/plugins/morris/raphael-min.js', '/assets/global/plugins/jquery.sparkline.min.js', '/assets/pages/scripts/dashboard.min.js']
				});
			}]
		},
		authenticate: true
	}).state('404', {
		templateUrl: 'tpl/404.html',
		data: { pageTitle: '404 Page Not Found' },
		authenticate: false,
		resolve: {
			deps: ['$ocLazyLoad', function ($ocLazyLoad) {
				return $ocLazyLoad.load({
					name: 'mimicTrading',
					insertBefore: '#ng_load_plugins_before',
					files: ['/assets/pages/css/error.min.css']
				});
			}]
		}
	}).state('500', {
		templateUrl: 'tpl/500.html',
		data: { pageTitle: '500 Internal Server Error' },
		authenticate: false,
		resolve: {
			deps: ['$ocLazyLoad', function ($ocLazyLoad) {
				return $ocLazyLoad.load({
					name: 'mimicTrading',
					insertBefore: '#ng_load_plugins_before',
					files: ['/assets/pages/css/error.min.css']
				});
			}]
		}
	});
}]);
'use strict';

/***
GLobal Directives
***/

// Route State Load Spinner(used on page or content load)

mimicTrading.directive('ngSpinnerBar', ['$rootScope', '$state', function ($rootScope, $state) {
    return {
        link: function link(scope, element, attrs) {
            // by defult hide the spinner bar
            element.addClass('hide'); // hide spinner bar by default

            // display the spinner bar whenever the route changes(the content part started loading)
            $rootScope.$on('$stateChangeStart', function () {
                element.removeClass('hide'); // show spinner bar
                Layout.closeMainMenu();
            });

            // hide the spinner bar on rounte change success(after the content loaded)
            $rootScope.$on('$stateChangeSuccess', function (event) {
                element.addClass('hide'); // hide spinner bar
                $('body').removeClass('page-on-load'); // remove page loading indicator
                Layout.setAngularJsMainMenuActiveLink('match', null, event.currentScope.$state); // activate selected link in the sidebar menu

                // auto scorll to page top
                setTimeout(function () {
                    App.scrollTop(); // scroll to the top on content load
                }, $rootScope.settings.layout.pageAutoScrollOnLoad);
            });

            // handle errors
            $rootScope.$on('$stateNotFound', function () {
                element.addClass('hide'); // hide spinner bar
            });

            // handle errors
            $rootScope.$on('$stateChangeError', function () {
                element.addClass('hide'); // hide spinner bar
            });
        }
    };
}])

// Handle global LINK click
.directive('a', function () {
    return {
        restrict: 'E',
        link: function link(scope, elem, attrs) {
            if (attrs.ngClick || attrs.href === '' || attrs.href === '#') {
                elem.on('click', function (e) {
                    e.preventDefault(); // prevent link click for above criteria
                });
            }
        }
    };
})

// Handle Dropdown Hover Plugin Integration
.directive('dropdownMenuHover', function () {
    return {
        link: function link(scope, elem) {
            elem.dropdownHover();
        }
    };
}).directive('statusLabel', function () {
    return {
        restrict: 'E',
        scope: {
            status: '='
        },
        template: '<span class="label label-sm" ng-class="\'label-\' + statusType">{{statusText}}</span>',
        link: function link(scope) {
            switch (scope.status) {
                case true:
                case 1:
                    scope.statusType = 'info';
                    scope.statusText = 'ACTIVE';
                    break;

                case false:
                case 0:
                    scope.statusType = 'danger';
                    scope.statusText = 'INACTIVE';
                    break;

                default:
                    scope.statusType = 'default';
                    scope.statusText = 'NOT FOUND';
            }
        }
    };
});
'use strict';

mimicTrading.controller('blogCreateCtrl', ['$scope', '$state', 'RestSvr', '$rootScope', 'appSvr', 'blogSvr', 'Upload', function ($scope, $state, RestSvr, $rootScope, appSvr, blogSvr, Upload) {

	$scope.$on('$viewContentLoaded', function () {
		/**
   * Initialize the jquery components when view contents loaded properly
   */
		appSvr.init();
	});

	$scope.blog_type = blogSvr.getBlogTypes();

	$scope.new_blog = function (isValid) {
		if (!isValid) {
			return;
		}

		$scope.isLoading = true;
		Upload.upload({
			url: baseUrl('blog/add'),
			data: $scope.blog
		}).then(function (response) {
			$state.go('blogs');
		}).catch(function (errors) {
			App.alert({ type: 'danger', icon: 'warning', message: errors.message, container: $rootScope.settings.errorContainer, place: 'prepend' });
		}).finally(function () {
			$scope.isLoading = false;
		});
	};
}]);
'use strict';

mimicTrading.controller('blogCtrl', ['$scope', '$state', 'RestSvr', '$rootScope', 'appSvr', function ($scope, $state, RestSvr, $rootScope, appSvr) {

	$scope.$on('$viewContentLoaded', function () {
		/**
   * Initialize the jquery components when view contents loaded properly
   */
		appSvr.init();

		TableAjax.init({
			url: 'blog/list/',
			columns: [{ "data": "id", "orderable": false }, { "data": "title" }, { "data": "type" }, { "data": "slug" }, { "data": "status" }, { "data": "created_date" }, { "data": "action", "orderable": false }]
		});
	});
}]);
'use strict';

mimicTrading.controller('blogEditCtrl', ['$scope', '$state', 'RestSvr', '$rootScope', 'appSvr', 'blog', 'blogSvr', 'Upload', function ($scope, $state, RestSvr, $rootScope, appSvr, blog, blogSvr, Upload) {

	$scope.$on('$viewContentLoaded', function () {
		/**
   * Initialize the jquery components when view contents loaded properly
   */
		appSvr.init();
	});
	$scope.blog_type = blogSvr.getBlogTypes();
	$scope.blog = blog.record;

	$scope.edit_blog = function (isValid) {
		if (!isValid) {
			return;
		}

		$scope.isLoading = true;
		Upload.upload({
			url: baseUrl('blog/add'),
			data: $scope.blog
		}).then(function (response) {
			$state.go('blogs');
		}).catch(function (errors) {
			App.alert({ type: 'danger', icon: 'warning', message: errors.message, container: $rootScope.settings.errorContainer, place: 'prepend' });
		}).finally(function () {
			$scope.isLoading = false;
		});
	};
}]);
'use strict';

mimicTrading.controller('blogViewCtrl', ['$scope', '$state', 'RestSvr', '$rootScope', 'appSvr', 'blog', function ($scope, $state, RestSvr, $rootScope, appSvr, blog) {

	$scope.$on('$viewContentLoaded', function () {
		/**
   * Initialize the jquery components when view contents loaded properly
   */
		appSvr.init();
	});
	$scope.blog = blog.record;
	$scope.goToEdit = function () {
		return $state.go('editBlog', { id: $scope.blog.slug });
	};
}]);
'use strict';

mimicTrading.controller('confirmationDialogCtrl', ['$uibModalInstance', 'data', function ($uibModalInstance, data) {

	var $ctrl = this;

	$ctrl.ok = function () {
		$uibModalInstance.close(data);
	};

	$ctrl.cancel = function () {
		$uibModalInstance.dismiss('cancel');
	};
}]);
'use strict';

mimicTrading.controller('cmsCreateCtrl', ['$scope', '$state', 'RestSvr', '$rootScope', 'appSvr', 'cmsSvr', function ($scope, $state, RestSvr, $rootScope, appSvr, cmsSvr) {

	$scope.$on('$viewContentLoaded', function () {
		/**
   * Initialize the jquery components when view contents loaded properly
   */
		appSvr.init();
	});

	$scope.cms_type = cmsSvr.getCmsTypes();

	$scope.new_cms = function (isValid) {
		if (!isValid) {
			return;
		}

		$scope.isLoading = true;
		RestSvr.post('cms/add', $scope.cms).then(function (response) {
			$state.go('cms');
		}).catch(function (errors) {
			App.alert({ type: 'danger', icon: 'warning', message: errors.message, container: $rootScope.settings.errorContainer, place: 'prepend' });
		}).then(function () {
			$scope.isLoading = false;
		});
	};
}]);
'use strict';

mimicTrading.controller('cmsCtrl', ['$scope', '$state', 'RestSvr', '$rootScope', 'appSvr', function ($scope, $state, RestSvr, $rootScope, appSvr) {

	$scope.$on('$viewContentLoaded', function () {
		/**
   * Initialize the jquery components when view contents loaded properly
   */
		appSvr.init();

		TableAjax.init({
			url: 'cms/list/',
			columns: [{ "data": "id", "orderable": false }, { "data": "title" }, { "data": "type" }, { "data": "status" }, { "data": "created_date" }, { "data": "action", "orderable": false }]
		});
	});
}]);
'use strict';

mimicTrading.controller('cmsEditCtrl', ['$scope', '$state', 'RestSvr', '$rootScope', 'appSvr', 'cms', 'cmsSvr', function ($scope, $state, RestSvr, $rootScope, appSvr, cms, cmsSvr) {

	$scope.$on('$viewContentLoaded', function () {
		/**
   * Initialize the jquery components when view contents loaded properly
   */
		appSvr.init();
	});
	$scope.cms_type = cmsSvr.getCmsTypes();
	$scope.cms = cms.record;

	$scope.edit_cms = function (isValid) {
		if (!isValid) {
			return;
		}

		$scope.isLoading = true;
		RestSvr.put('cms/edit', $scope.cms).then(function (response) {
			$state.go('cms');
		}).catch(function (errors) {
			App.alert({ type: 'danger', icon: 'warning', message: errors.message, container: $rootScope.settings.errorContainer, place: 'prepend' });
		}).then(function () {
			$scope.isLoading = false;
		});
	};
}]);
'use strict';

mimicTrading.controller('cmsViewCtrl', ['$scope', '$state', 'RestSvr', '$rootScope', 'appSvr', 'cms', function ($scope, $state, RestSvr, $rootScope, appSvr, cms) {

	$scope.$on('$viewContentLoaded', function () {
		/**
   * Initialize the jquery components when view contents loaded properly
   */
		appSvr.init();
	});
	$scope.cms = cms.record;
	$scope.goToEdit = function () {
		return $state.go('editCms', { id: $scope.cms.type });
	};
}]);
'use strict';

angular.module('mimicTrading').controller('dashboardCtrl', ['$scope', '$location', '$rootScope', function ($scope, $location, $rootScope) {
	$scope.$on('$viewContentLoaded', function () {
		// initialize core components
		App.initAjax();
	});

	// set sidebar closed and body solid layout mode
	$rootScope.settings.layout.pageContentWhite = true;
	$rootScope.settings.layout.pageBodySolid = false;
	$rootScope.settings.layout.pageSidebarClosed = false;
	$rootScope.settings.hideLoginForm = true;
	console.log('I am loaded properly!!!');
}]);
'use strict';

mimicTrading.controller('faqCreateCtrl', ['$scope', '$state', 'RestSvr', '$rootScope', 'appSvr', function ($scope, $state, RestSvr, $rootScope, appSvr) {

	$scope.$on('$viewContentLoaded', function () {
		/**
   * Initialize the jquery components when view contents loaded properly
   */
		appSvr.init();
	});

	$scope.new_faq = function (isValid) {
		if (!isValid) {
			return;
		}

		$scope.isLoading = true;
		RestSvr.post('faq/add', $scope.faq).then(function (response) {
			$state.go('faq');
		}).catch(function (errors) {
			App.alert({ type: 'danger', icon: 'warning', message: errors.message, container: $rootScope.settings.errorContainer, place: 'prepend' });
		}).then(function () {
			$scope.isLoading = false;
		});
	};
}]);
'use strict';

mimicTrading.controller('faqCtrl', ['$scope', '$state', 'RestSvr', '$rootScope', 'appSvr', function ($scope, $state, RestSvr, $rootScope, appSvr) {

	$scope.$on('$viewContentLoaded', function () {
		/**
   * Initialize the jquery components when view contents loaded properly
   */
		appSvr.init();

		TableAjax.init({
			url: 'faq/list/',
			columns: [{ "data": "id", "orderable": false }, { "data": "question" }, { "data": "order" }, { "data": "status" }, { "data": "created_date" }, { "data": "action", "orderable": false }]
		});
	});
}]);
'use strict';

mimicTrading.controller('faqEditCtrl', ['$scope', '$state', 'RestSvr', '$rootScope', 'appSvr', 'faq', function ($scope, $state, RestSvr, $rootScope, appSvr, faq) {

	$scope.$on('$viewContentLoaded', function () {
		/**
   * Initialize the jquery components when view contents loaded properly
   */
		appSvr.init();
	});

	$scope.faq = faq.record;

	$scope.edit_faq = function (isValid) {
		if (!isValid) {
			return;
		}

		$scope.isLoading = true;
		RestSvr.put('faq/edit', $scope.faq).then(function (response) {
			$state.go('faq');
		}).catch(function (errors) {
			App.alert({ type: 'danger', icon: 'warning', message: errors.message, container: $rootScope.settings.errorContainer, place: 'prepend' });
		}).then(function () {
			$scope.isLoading = false;
		});
	};
}]);
'use strict';

mimicTrading.controller('faqViewCtrl', ['$scope', '$state', 'RestSvr', '$rootScope', 'appSvr', 'faq', function ($scope, $state, RestSvr, $rootScope, appSvr, faq) {

	$scope.$on('$viewContentLoaded', function () {
		/**
   * Initialize the jquery components when view contents loaded properly
   */
		appSvr.init();
	});
	$scope.faq = faq.record;
	$scope.goToEdit = function () {
		return $state.go('editFaq', { id: $scope.faq._id });
	};
}]);
'use strict';

mimicTrading.controller('loginCtrl', ['$scope', '$state', 'RestSvr', 'loginSrv', function ($scope, $state, RestSvr, loginSrv) {

	/**
  * login function will authenticate user 
  * and redirect to specific dashboard
  * @param  {Boolean} isValid [Check if form is valid]
  * @return {none}   [User will redirect to dashboard]
  */
	$scope.login = function (isValid) {
		if (!isValid) {
			return;
		}
		$scope.isLoading = true;
		RestSvr.login('login', $scope.user).then(function (response) {
			/* loginSrv will initialize user session
    * and store user data into localStorage
    * $rootScope.admin assign a globle variable
    */
			loginSrv.initAdminSession(response.user, response.token);
			$state.go('dashboard');
		}).catch(function (errors) {
			$scope.message = errors.message;
		}).then(function () {
			$scope.isLoading = false;
		});
	};
}]);
'use strict';

mimicTrading.controller('notificationCtrl', ['$scope', '$state', 'RestSvr', 'appSvr', 'notifications', 'notificationSvr', '$rootScope', '$location', '$document', '$uibModal', function ($scope, $state, RestSvr, appSvr, notifications, notificationSvr, $rootScope, $location, $document, $uibModal) {

	$scope.$on('$viewContentLoaded', function () {
		/**
   * Initialize the jquery components when view contents loaded properly
   */
		appSvr.init();
	});

	$scope.notifications = notifications.records;
	console.log($scope.notifications);
	$scope.paging = notifications.paging;

	$scope.selected = [];

	/**
  * load function will reload the list when pagination changes
  * @param  {int} page [page number]
  * @return {Object}
  */
	var load = function load(page) {
		return notificationSvr.getNotificationList(page).then(function (_ref) {
			var records = _ref.records,
			    paging = _ref.paging;

			$scope.notifications = records;
			$scope.paging = paging;
		}).catch(function (errors) {
			return App.alert({ type: 'danger', icon: 'warning', message: errors.message, container: $rootScope.settings.errorContainer, place: 'prepend' });
		});
	};

	/**
  * when pagination clicked pageChanged will triggered automatically
  * @return {}
  */
	$scope.pageChanged = function () {
		return load($scope.paging.page);
	};

	/**
  * toggle will check and uncheck the checkbox
  * @param  {int} item
  * @param  {array} list
  */
	$scope.toggle = function (item, list) {
		var idx = list.indexOf(item);
		if (idx > -1) {
			list.splice(idx, 1);
		} else {
			list.push(item);
		}
	};

	/**
  * check if selected item already exists in list array
  * @param  {int} 
  * @param  {array} list
  * @return {Boolean}
  */
	$scope.exists = function (item, list) {
		return list.indexOf(item) > -1;
	};

	/**
  * isChecked function will let the system know about list array length is equals to notifications array length
  * @return {Boolean}
  */
	$scope.isChecked = function () {
		return $scope.selected.length === $scope.notifications.length;
	};

	/**
  * toggleAll will use to toggle all the checkboxes 
  * @return {}
  */
	$scope.toggleAll = function () {
		if ($scope.selected.length === $scope.notifications.length) {
			$scope.selected = [];
		} else if ($scope.selected.length === 0 || $scope.selected.length > 0) {
			$scope.selected = $scope.notifications.map(function (x) {
				return x.id;
			}).slice(0);
		}
	};

	$scope.markAsRead = function () {
		if ($scope.selected.length > 0) {
			$scope.open('markAsRead');
		} else {
			App.alert({
				type: 'danger',
				icon: 'warning',
				message: 'Please select an action',
				container: $rootScope.settings.errorContainer,
				place: 'prepend'
			});
		}
	};

	$scope.delete = function () {
		if ($scope.selected.length > 0) {
			$scope.open('delete');
		} else {
			App.alert({
				type: 'danger',
				icon: 'warning',
				message: 'Please select an action',
				container: $rootScope.settings.errorContainer,
				place: 'prepend'
			});
		}
	};

	$scope.open = function (action) {
		var modalInstance = $uibModal.open({
			ariaLabelledBy: 'modal-title',
			ariaDescribedBy: 'modal-body',
			templateUrl: '/admin/confirmationDialog/views/confirmation_dialog.html',
			size: 'sm',
			controller: 'confirmationDialogCtrl',
			controllerAs: '$ctrl',
			resolve: { data: function data() {
					return $scope.selected;
				} }
		});

		modalInstance.result.then(function (selectedItem) {
			if (action === 'markAsRead') {
				notificationSvr.markAsRead(selectedItem).then(function (response) {
					return $state.reload();
				}).catch(handleCatch);
			} else {
				notificationSvr.deleteNotification(selectedItem).then(function (response) {
					return $state.reload();
				}).catch(handleCatch);
			}
		}, function () {
			console.log('Modal dismissed at: ' + new Date());
		});
	};

	var handleCatch = function handleCatch(errors) {
		return App.alert({ type: 'danger', icon: 'warning', message: errors.message, container: $rootScope.settings.errorContainer, place: 'prepend' });
	};
}]);
'use strict';

mimicTrading.controller('testimonialCreateCtrl', ['$scope', '$state', 'RestSvr', '$rootScope', 'appSvr', 'testimonialSvr', 'Upload', function ($scope, $state, RestSvr, $rootScope, appSvr, testimonialSvr, Upload) {

	$scope.$on('$viewContentLoaded', function () {
		/**
   * Initialize the jquery components when view contents loaded properly
   */
		appSvr.init();
	});

	$scope.new_testimonial = function (isValid) {
		if (!isValid) {
			return;
		}

		$scope.isLoading = true;
		Upload.upload({
			url: baseUrl('testimonial/add'),
			data: $scope.testimonial
		}).then(function (response) {
			$state.go('testimonials');
		}).catch(function (errors) {
			App.alert({ type: 'danger', icon: 'warning', message: errors.message, container: $rootScope.settings.errorContainer, place: 'prepend' });
		}).finally(function () {
			$scope.isLoading = false;
		});
	};
}]);
'use strict';

mimicTrading.controller('testimonialCtrl', ['$scope', '$state', 'RestSvr', '$rootScope', 'appSvr', function ($scope, $state, RestSvr, $rootScope, appSvr) {

	$scope.$on('$viewContentLoaded', function () {
		/**
   * Initialize the jquery components when view contents loaded properly
   */
		appSvr.init();

		TableAjax.init({
			url: 'testimonial/list/',
			columns: [{ "data": "id", "orderable": false }, { "data": "name" }, { "data": "status" }, { "data": "created_date" }, { "data": "action", "orderable": false }]
		});
	});
}]);
'use strict';

mimicTrading.controller('testimonialEditCtrl', ['$scope', '$state', 'RestSvr', '$rootScope', 'appSvr', 'testimonial', 'testimonialSvr', 'Upload', function ($scope, $state, RestSvr, $rootScope, appSvr, testimonial, testimonialSvr, Upload) {

	$scope.$on('$viewContentLoaded', function () {
		/**
   * Initialize the jquery components when view contents loaded properly
   */
		appSvr.init();
	});
	$scope.testimonial = testimonial.record;

	$scope.edit_testimonial = function (isValid) {
		if (!isValid) {
			return;
		}

		$scope.isLoading = true;
		Upload.upload({
			url: baseUrl('testimonial/add'),
			data: $scope.testimonial
		}).then(function (response) {
			$state.go('testimonials');
		}).catch(function (errors) {
			App.alert({ type: 'danger', icon: 'warning', message: errors.message, container: $rootScope.settings.errorContainer, place: 'prepend' });
		}).finally(function () {
			$scope.isLoading = false;
		});
	};
}]);
'use strict';

mimicTrading.controller('testimonialViewCtrl', ['$scope', '$state', 'RestSvr', '$rootScope', 'appSvr', 'testimonial', function ($scope, $state, RestSvr, $rootScope, appSvr, testimonial) {

	$scope.$on('$viewContentLoaded', function () {
		/**
   * Initialize the jquery components when view contents loaded properly
   */
		appSvr.init();
	});
	$scope.testimonial = testimonial.record;
	$scope.goToEdit = function () {
		return $state.go('editTestimonial', { id: $scope.testimonial._id });
	};
}]);
'use strict';

mimicTrading.controller('userCtrl', ['$scope', '$state', '$rootScope', 'Upload', 'appSvr', function ($scope, $state, $rootScope, Upload, appSvr) {

	$scope.$on('$viewContentLoaded', function () {
		/**
   * Initialize the jquery components when view contents loaded properly
   */
		appSvr.init();

		/**
   * only Intialize datatable if current state is users
   * @param  {String} $state.current.name [current state name]
   */
		if ($state.current.name === 'users') {
			// Intialize datatable
			TableAjax.init({
				url: 'user/list',
				columns: [{ "data": "id", "orderable": false }, { "data": "firstname" }, { "data": "lastname" }, { "data": "email" }, { "data": "status" }, { "data": "created_date" }, { "data": "action", "orderable": false }]
			});
		}
	});

	/**
  * Check if form is valid and send the data to server
  * @param  {isValid} isValid [form.valid]
  * @return {redirect to user listing on successful insertion}
  */
	$scope.new_user = function (isValid) {
		if (!isValid) {
			App.scrollTop();
			return;
		}

		// We need to manaually assign user type to user's scope
		// for trader the value is 2 (trader -> 2)
		_.assign($scope.user, { user_type: 2 });

		$scope.isLoading = true;
		Upload.upload({
			url: baseUrl('user/add/'),
			data: $scope.user
		}).then(function (response) {
			$state.go('users');
		}).catch(function (error) {
			if (error.data) {
				angular.forEach(error.data, function (value, prop) {
					$scope.newUserForm[prop].$setValidity('unique', false);
				});
				App.scrollTop();
			}
		}).finally(function () {
			$scope.isLoading = false;
		});
	};

	/**
  * this will clear the
  * @param  input name attr
  */
	$scope.clear = function (name, form) {
		form[name].$setValidity('unique', true);
	};
}]);
'use strict';

mimicTrading.controller('userEditCtrl', ['$scope', '$state', 'user', 'Upload', 'appSvr', function ($scope, $state, user, Upload, appSvr) {
	$scope.$on('$viewContentLoaded', function () {
		/**
   * Initialize the jquery components when view contents loaded properly
   */
		appSvr.init();
	});

	$scope.user = user.record;

	/**
  * Check if form is valid and send the data to server
  * @param  {isValid} isValid [form.valid]
  * @return {redirect to user listing on successful insertion}
  */
	$scope.edit_user = function (isValid) {

		if (!isValid) {
			App.scrollTop();
			return;
		}

		var user = {};
		if (!angular.isObject($scope.user.profile_image)) {
			angular.copy($scope.user, user);
			delete user.profile_image;
		} else {
			user = $scope.user;
		}

		$scope.isLoading = true;
		Upload.upload({
			url: baseUrl('user/edit/' + user._id),
			data: user,
			method: 'PUT'
		}).then(function (response) {
			$state.go('users');
		}).catch(function (error) {
			if (error.data) {
				angular.forEach(error.data, function (value, prop) {
					$scope.editUserForm[prop].$setValidity('unique', false);
				});
				App.scrollTop();
			}
		}).finally(function () {
			$scope.isLoading = false;
		});
	};

	/**
  * this will clear the form error
  * @param  input name attr
  */
	$scope.clear = function (name, form) {
		form[name].$setValidity('unique', true);
	};
}]);
'use strict';

mimicTrading.controller('userViewCtrl', ['$scope', '$state', 'user', 'appSvr', function ($scope, $state, user, appSvr) {
	$scope.$on('$viewContentLoaded', function () {
		/**
   * Initialize the jquery components when view contents loaded properly
   */
		appSvr.init();
	});

	/**
  * Request would only sent if state params has id
  * @param  {integer} $state.params.id [user id]
  * @return {Object}                  [user data]
  */

	$scope.userinfo = user.record;

	/**
  * it would take you to the edit page
  * 
  */
	$scope.goToEdit = function () {
		$state.go('editUser', { id: $state.params.id });
	};

	$scope.goBack = function () {
		$state.go('users');
		// var queryString = $location.search();
		// $state.go((queryString) ? ((queryString.back === 'strategies') ? 'strategies':'users'):'users');
	};
}]);
'use strict';

var TableAjax = function () {

    var initPickers = function initPickers() {
        //init date pickers
        $('.date-picker').datepicker({
            rtl: App.isRTL(),
            autoclose: true
        });
    };

    var handleRecords = function handleRecords(options) {

        var grid = new Datatable();

        grid.init({
            src: $("#datatable_ajax"),
            onSuccess: function onSuccess(response) {
                // execute some code after table records loaded
                setTimeout(function () {
                    $('.tooltips').tooltip();
                }, 1000);
            },
            onError: function onError(grid, err) {
                // execute some code on network or other general error  
            },
            loadingMessage: 'Loading...',
            dataTable: { // here you can define a typical datatable settings from http://datatables.net/usage/options 

                // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
                // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/scripts/datatable.js). 
                // So when dropdowns used the scrollable div should be removed. 
                // "dom": "<'row'<'col-md-7 col-sm-12'pli><'col-md-5 col-sm-12'<'table-group-actions pull-right'>>r>t<'row'<'col-md-8 col-sm-12'pli><'col-md-4 col-sm-12'>>",
                "dom": "<'row'<'col-md-7 col-sm-12'pli><'col-md-5 col-sm-12'<'table-group-actions pull-right'>>r><'table-responsive't><'row'<'col-md-8 col-sm-12'pli><'col-md-4 col-sm-12'>>", // datatable layout

                "bStateSave": true, // save datatable state(pagination, sort, etc) in cookie.

                "lengthMenu": [[10, 20, 50, 100, 150, 200], [10, 20, 50, 100, 150, 200] // change per page values here
                ],
                "pageLength": 10, // default record count per page
                "ajax": {
                    "url": baseUrl(options.url), // ajax source
                    "headers": {
                        "Authorization": "Bearer " + JSON.parse(prefix('token'))
                    },
                    "error": function error(err) {

                        var message = "Could not complete request. Please check your internet connection";
                        App.unblockUI(grid.gettableContainer());
                        if (err.status === 401) {
                            if (err.responseJSON.errors.code === "invalid_token") {
                                var $body = angular.element(document.body);
                                var $rootScope = $body.injector().get('$rootScope');
                                message = "Your Session has been expired, please login again to continue.";
                                setTimeout(function () {
                                    $rootScope.clearToken();
                                }, 1500);
                            }
                        }

                        App.alert({
                            type: 'danger',
                            icon: 'warning',
                            message: message,
                            container: grid.getTableWrapper(),
                            place: 'prepend'
                        });
                    }
                },
                "columns": options.columns
                // "order": [
                //     [1, "asc"]
                // ] // set first column as a default sort by asc
            }
        });

        // handle group actionsubmit button click
        grid.getTableWrapper().on('click', '.table-group-action-submit', function (e) {
            e.preventDefault();
            var action = $(".table-group-action-input", grid.getTableWrapper());
            if (action.val() !== "" && grid.getSelectedRowsCount() > 0) {
                grid.setAjaxParam("customActionType", "group_action");
                grid.setAjaxParam("customActionName", action.val());
                grid.setAjaxParam("id", grid.getSelectedRows());
                grid.getDataTable().ajax.reload();
                grid.clearAjaxParams();
            } else if (action.val() === "") {
                App.alert({
                    type: 'danger',
                    icon: 'warning',
                    message: 'Please select an action',
                    container: grid.getTableWrapper(),
                    place: 'prepend'
                });
            } else if (grid.getSelectedRowsCount() === 0) {
                App.alert({
                    type: 'danger',
                    icon: 'warning',
                    message: 'No record selected',
                    container: grid.getTableWrapper(),
                    place: 'prepend'
                });
            }
        });
    };

    return {

        //main function to initiate the module
        init: function init(options) {

            initPickers();
            handleRecords(options);
        }

    };
}();
'use strict';

/* Application routes */

mimicTrading.config(['$stateProvider', function ($stateProvider) {

	var blogResolver = ['blogSvr', '$stateParams', function (blogSvr, $stateParams) {
		return blogSvr.getBlogById($stateParams.id);
	}];

	$stateProvider.state('blogs', {
		url: '/blogs',
		controller: 'blogCtrl',
		templateUrl: 'blog/views/blog.html',
		data: { pageTitle: 'Manage Blog' },
		resolve: {
			deps: ['$ocLazyLoad', function ($ocLazyLoad) {
				return $ocLazyLoad.load({
					name: 'mimicTrading',
					insertBefore: '#ng_load_plugins_before', // load the above css files before a LINK element with this ID. Dynamic CSS files must be loaded between core and theme css files
					files: ['/assets/global/plugins/datatables/datatables.min.css', '/assets/global/plugins/datatables/plugins/bootstrap/datatables.bootstrap.css', '/assets/global/plugins/bootstrap-datepicker/css/bootstrap-datepicker3.min.css', '/assets/global/plugins/datatables/datatables.all.min.js', '/assets/global/plugins/bootstrap-datepicker/js/bootstrap-datepicker.min.js', '/assets/global/scripts/datatable.min.js']
				});
			}]
		},
		authenticate: true
	}).state('newBlog', {
		url: '/new-blog',
		controller: 'blogCreateCtrl',
		templateUrl: 'blog/views/new_blog.html',
		data: { pageTitle: 'New Blog' },
		authenticate: true
	}).state('editBlog', {
		url: '/edit-blog/:id',
		controller: 'blogEditCtrl',
		templateUrl: 'blog/views/edit_blog.html',
		data: { pageTitle: 'Update Blog Detail' },
		authenticate: true,
		resolve: {
			blog: blogResolver
		}
	}).state('viewBlog', {
		url: '/view-blog/:id',
		controller: 'blogViewCtrl',
		templateUrl: 'blog/views/view_blog.html',
		data: { pageTitle: 'View Blog Detail' },
		authenticate: true,
		resolve: {
			blog: blogResolver
		}
	});
}]);
'use strict';

/* Application routes */

mimicTrading.config(['$stateProvider', function ($stateProvider) {

	var cmsResolver = ['cmsSvr', '$stateParams', function (cmsSvr, $stateParams) {
		return cmsSvr.getCmsById($stateParams.id);
	}];

	$stateProvider.state('cms', {
		url: '/cms',
		controller: 'cmsCtrl',
		templateUrl: 'cms/views/cms.html',
		data: { pageTitle: 'Manage Content' },
		resolve: {
			deps: ['$ocLazyLoad', function ($ocLazyLoad) {
				return $ocLazyLoad.load({
					name: 'mimicTrading',
					insertBefore: '#ng_load_plugins_before', // load the above css files before a LINK element with this ID. Dynamic CSS files must be loaded between core and theme css files
					files: ['/assets/global/plugins/datatables/datatables.min.css', '/assets/global/plugins/datatables/plugins/bootstrap/datatables.bootstrap.css', '/assets/global/plugins/bootstrap-datepicker/css/bootstrap-datepicker3.min.css', '/assets/global/plugins/datatables/datatables.all.min.js', '/assets/global/plugins/bootstrap-datepicker/js/bootstrap-datepicker.min.js', '/assets/global/scripts/datatable.min.js']
				});
			}]
		},
		authenticate: true
	}).state('newCms', {
		url: '/new-cms',
		controller: 'cmsCreateCtrl',
		templateUrl: 'cms/views/new_cms.html',
		data: { pageTitle: 'New CMS' },
		authenticate: true
	}).state('editCms', {
		url: '/edit-cms/:id',
		controller: 'cmsEditCtrl',
		templateUrl: 'cms/views/edit_cms.html',
		data: { pageTitle: 'Update CMS Detail' },
		authenticate: true,
		resolve: {
			cms: cmsResolver
		}
	}).state('viewCms', {
		url: '/view-cms/:id',
		controller: 'cmsViewCtrl',
		templateUrl: 'cms/views/view_cms.html',
		data: { pageTitle: 'View CMS Detail' },
		authenticate: true,
		resolve: {
			cms: cmsResolver
		}
	});
}]);
'use strict';

/* Application routes */

mimicTrading.config(['$stateProvider', function ($stateProvider) {

	var faqResolver = ['faqSvr', '$stateParams', function (faqSvr, $stateParams) {
		return faqSvr.getFaqById($stateParams.id);
	}];

	$stateProvider.state('faq', {
		url: '/faq',
		controller: 'faqCtrl',
		templateUrl: 'faq/views/faq.html',
		data: { pageTitle: 'Manage FAQ' },
		resolve: {
			deps: ['$ocLazyLoad', function ($ocLazyLoad) {
				return $ocLazyLoad.load({
					name: 'mimicTrading',
					insertBefore: '#ng_load_plugins_before', // load the above css files before a LINK element with this ID. Dynamic CSS files must be loaded between core and theme css files
					files: ['/assets/global/plugins/datatables/datatables.min.css', '/assets/global/plugins/datatables/plugins/bootstrap/datatables.bootstrap.css', '/assets/global/plugins/bootstrap-datepicker/css/bootstrap-datepicker3.min.css', '/assets/global/plugins/datatables/datatables.all.min.js', '/assets/global/plugins/bootstrap-datepicker/js/bootstrap-datepicker.min.js', '/assets/global/scripts/datatable.min.js']
				});
			}]
		},
		authenticate: true
	}).state('newFaq', {
		url: '/new-faq',
		controller: 'faqCreateCtrl',
		templateUrl: 'faq/views/new_faq.html',
		data: { pageTitle: 'New FAQ' },
		authenticate: true
	}).state('editFaq', {
		url: '/edit-faq/:id',
		controller: 'faqEditCtrl',
		templateUrl: 'faq/views/edit_faq.html',
		data: { pageTitle: 'Update FAQ Detail' },
		authenticate: true,
		resolve: {
			faq: faqResolver
		}
	}).state('viewFaq', {
		url: '/view-faq/:id',
		controller: 'faqViewCtrl',
		templateUrl: 'faq/views/view_faq.html',
		data: { pageTitle: 'View FAQ Detail' },
		authenticate: true,
		resolve: {
			faq: faqResolver
		}
	});
}]);
'use strict';

/* Application routes */

mimicTrading.config(['$stateProvider', function ($stateProvider) {

	$stateProvider.state('notifications', {
		url: '/notifications',
		controller: 'notificationCtrl',
		templateUrl: 'notifications/views/notifications.html',
		data: { pageTitle: 'Notifications' },
		resolve: {
			deps: ['$ocLazyLoad', function ($ocLazyLoad) {
				return $ocLazyLoad.load({
					name: 'mimicTrading',
					insertBefore: '#ng_load_plugins_before', // load the above css files before a LINK element with this ID. Dynamic CSS files must be loaded between core and theme css files
					files: ['/assets/apps/css/inbox.css']
				});
			}],
			notifications: ['notificationSvr', function (notificationSvr) {
				return notificationSvr.getNotificationList();
			}]
		},
		authenticate: true
	});
}]);
'use strict';

/* Application routes */

mimicTrading.config(['$stateProvider', function ($stateProvider) {

	var testimonialResolver = ['testimonialSvr', '$stateParams', function (testimonialSvr, $stateParams) {
		return testimonialSvr.getTestimonialById($stateParams.id);
	}];

	$stateProvider.state('testimonials', {
		url: '/testimonials',
		controller: 'testimonialCtrl',
		templateUrl: 'testimonial/views/testimonial.html',
		data: { pageTitle: 'Manage Testimonial' },
		resolve: {
			deps: ['$ocLazyLoad', function ($ocLazyLoad) {
				return $ocLazyLoad.load({
					name: 'mimicTrading',
					insertBefore: '#ng_load_plugins_before', // load the above css files before a LINK element with this ID. Dynamic CSS files must be loaded between core and theme css files
					files: ['/assets/global/plugins/datatables/datatables.min.css', '/assets/global/plugins/datatables/plugins/bootstrap/datatables.bootstrap.css', '/assets/global/plugins/bootstrap-datepicker/css/bootstrap-datepicker3.min.css', '/assets/global/plugins/datatables/datatables.all.min.js', '/assets/global/plugins/bootstrap-datepicker/js/bootstrap-datepicker.min.js', '/assets/global/scripts/datatable.min.js']
				});
			}]
		},
		authenticate: true
	}).state('newTestimonial', {
		url: '/new-testimonial',
		controller: 'testimonialCreateCtrl',
		templateUrl: 'testimonial/views/new_testimonial.html',
		data: { pageTitle: 'New Testimonial' },
		authenticate: true
	}).state('editTestimonial', {
		url: '/edit-testimonial/:id',
		controller: 'testimonialEditCtrl',
		templateUrl: 'testimonial/views/edit_testimonial.html',
		data: { pageTitle: 'Update Testimonial Detail' },
		authenticate: true,
		resolve: {
			testimonial: testimonialResolver
		}
	}).state('viewTestimonial', {
		url: '/view-testimonial/:id',
		controller: 'testimonialViewCtrl',
		templateUrl: 'testimonial/views/view_testimonial.html',
		data: { pageTitle: 'View Testimonial Detail' },
		authenticate: true,
		resolve: {
			testimonial: testimonialResolver
		}
	});
}]);
'use strict';

/* Application routes */

mimicTrading.config(['$stateProvider', function ($stateProvider) {
	/**
  * Common Resolver for two states, 
  * it will fetch all the trader by id ,
  * this will populate during edit and view trader,
  * JUST Following D.R.Y (don't repeat yourself)
  * @type {Object}
  */
	var userResolver = {
		user: ['userSvr', '$stateParams', function (userSvr, $stateParams) {
			return userSvr.getUserById($stateParams.id);
		}]
	};
	$stateProvider.state('users', {
		url: '/users',
		controller: 'userCtrl',
		templateUrl: 'users/views/userListing.html',
		data: { pageTitle: 'User Management' },
		resolve: {
			deps: ['$ocLazyLoad', function ($ocLazyLoad) {
				return $ocLazyLoad.load({
					name: 'mimicTrading',
					insertBefore: '#ng_load_plugins_before', // load the above css files before a LINK element with this ID. Dynamic CSS files must be loaded between core and theme css files
					files: ['/assets/global/plugins/datatables/datatables.min.css', '/assets/global/plugins/datatables/plugins/bootstrap/datatables.bootstrap.css', '/assets/global/plugins/bootstrap-datepicker/css/bootstrap-datepicker3.min.css', '/assets/global/plugins/datatables/datatables.all.min.js', '/assets/global/plugins/bootstrap-datepicker/js/bootstrap-datepicker.min.js', '/assets/global/scripts/datatable.min.js']
				});
			}]
		},
		authenticate: true
	}).state('newUser', {
		url: '/new-user',
		controller: 'userCtrl',
		templateUrl: 'users/views/new_user.html',
		data: { pageTitle: 'Add New User' },
		authenticate: true
	}).state('viewUser', {
		url: '/view-user/:id',
		controller: 'userViewCtrl',
		templateUrl: 'users/views/view_user.html',
		data: { pageTitle: 'User Detail' },
		authenticate: true,
		resolve: userResolver
	}).state('editUser', {
		url: '/edit-user/:id',
		controller: 'userEditCtrl',
		templateUrl: 'users/views/edit_user.html',
		data: { pageTitle: 'Update User Detail' },
		authenticate: true,
		resolve: userResolver
	});
}]);
'use strict';

mimicTrading.directive('notificationPanel', ['notificationSvr', '$location', '$rootScope', function (notificationSvr, $location, $rootScope) {
	return {
		restrict: 'A',
		link: function link(scope, elem) {
			// notificationSvr.getNotificationList()
			// .then(({records, paging}) => {
			// 	scope.notifications = records;
			// 	return notificationSvr.getNotificationCount();
			// })
			// .then($rootScope.manageCount)
			// .catch(errors => console.log(errors));
		},
		templateUrl: 'notifications/directives/notification-panel.html'
	};
}]);
'use strict';

mimicTrading.factory('blogSvr', ['RestSvr', function (RestSvr) {
    return {
        getBlogById: function getBlogById(id) {
            return RestSvr.get('blog/view/' + id);
        },
        getBlogTypes: function getBlogTypes() {
            return [{ value: 'about_us', title: 'About Page' }, { value: 'blog', title: 'Blog page' }];
        }
    };
}]);
'use strict';

mimicTrading.factory('cmsSvr', ['RestSvr', function (RestSvr) {
    return {
        getCmsById: function getCmsById(id) {
            return RestSvr.get('cms/view/' + id);
        },
        getCmsTypes: function getCmsTypes() {
            return ['about_us', 'privacy_policy', 'terms_conditions'];
        }
    };
}]);
'use strict';

mimicTrading.factory('faqSvr', ['RestSvr', function (RestSvr) {
    return {
        getFaqById: function getFaqById(id) {
            return RestSvr.get('faq/view/' + id);
        }
    };
}]);
'use strict';

mimicTrading.factory('loginSrv', ['localStorageService', '$rootScope', function (localStorageService, $rootScope) {
    // Don't use arrow function here because it will change the "this" to undefined
    return {
        isLogged: false,
        initAdminSession: function initAdminSession(admin, token) {
            // Don't use arrow function here because it will change the "this" to undefined
            this.isLogged = true;
            localStorageService.set('token', token);
            localStorageService.set('admin', admin);
            $rootScope.admin = localStorageService.get('admin');
        },
        getToken: function getToken() {
            return localStorageService.get('token');
        }
    };
}]);
'use strict';

mimicTrading.factory('notificationSvr', ['RestSvr', function (RestSvr) {
    return {
        getNotificationList: function getNotificationList() {
            var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
            return RestSvr.paginate('notification/list/', { page: page });
        },
        markAsRead: function markAsRead(notification_id) {
            return RestSvr.post('notification/status/', { notification_id: notification_id });
        },
        deleteNotification: function deleteNotification(notification_id) {
            return RestSvr.post('notification/delete/', { notification_id: notification_id });
        },
        getNotificationCount: function getNotificationCount() {
            return RestSvr.post('notification/unread/count/');
        }
    };
}]);
'use strict';

mimicTrading.factory('testimonialSvr', ['RestSvr', function (RestSvr) {
    return {
        getTestimonialById: function getTestimonialById(id) {
            return RestSvr.get('testimonial/view/' + id);
        }
    };
}]);
'use strict';

mimicTrading.factory('userSvr', ['RestSvr', function (RestSvr) {
    return {
        getUserById: function getUserById(id) {
            return RestSvr.get('user/view/' + id);
        }
    };
}]);
'use strict';

mimicTrading.factory('appSvr', ['$rootScope', function ($rootScope) {
	return {
		init: function init() {
			// initialize core components
			App.initAjax();
			// set default layout mode
			$rootScope.settings.layout.pageContentWhite = true;
			$rootScope.settings.layout.pageBodySolid = false;
			$rootScope.settings.layout.pageSidebarClosed = false;
		}
	};
}]);
'use strict';

mimicTrading.factory('RestSvr', ['$http', '$window', '$httpParamSerializerJQLike', '$q', function ($http, $window, $httpParamSerializerJQLike, $q) {
	return {
		login: function login(apiUrl, data) {
			var req = {
				method: 'POST',
				url: baseUrl(apiUrl),
				data: data
			};
			return $q(function (resolve, reject) {
				$http(req).then(function (response) {
					resolve({
						result: response.data.message,
						user: response.data.user,
						token: response.data.token
					});
				}).catch(function (response) {
					reject({
						errors: true,
						message: response.data.errors.message || 'Internal Server Error'
					});
				});
			});
		},
		get: function get(apiUrl, params) {
			var p = !angular.isUndefined(params) ? params : null,
			    req = {
				method: 'GET',
				url: baseUrl(apiUrl),
				params: p
			};

			return $q(function (resolve, reject) {
				$http(req).then(function (response) {
					resolve({
						record: response.data.result
					});
				}).catch(function (response) {
					reject({
						errors: true,
						message: response.data.errors.message || 'Internal Server Error'
					});
				});
			});
		},
		post: function post(apiUrl, data) {
			var req = {
				method: 'POST',
				url: baseUrl(apiUrl),
				data: data
			};
			return $q(function (resolve, reject) {
				$http(req).then(function (response) {
					resolve({
						result: response.data.message,
						user: response.data.user,
						records: response.data.result
					});
				}).catch(function (response) {
					var message = 'Internal Server Error';
					if (response.status === 404) {
						message = '404 Route not found';
					}
					reject({
						message: response.errors.message || message,
						status: response.status
					});
				});
			});
		},
		put: function put(apiUrl, data) {
			var req = {
				method: 'PUT',
				url: baseUrl(apiUrl),
				data: data
			};
			return $q(function (resolve, reject) {
				$http(req).then(function (response) {
					resolve({
						result: response.data.message,
						records: response.data.result
					});
				}).catch(function (response) {
					var message = 'Internal Server Error';
					if (response.status === 404) {
						message = '404 Route not found';
					}
					reject({
						message: response.errors.message || message,
						status: response.status
					});
				});
			});
		},
		paginate: function paginate(apiUrl, data, params) {
			var req = {
				method: 'POST',
				url: baseUrl(apiUrl),
				data: data,
				params: params
			};
			return $q(function (resolve, reject) {
				$http(req).then(function (response) {
					resolve({
						records: response.data.result,
						paging: response.data.paging
					});
				}).catch(function (errors) {
					var message = 'Internal Server Error';
					if (errors.status === 404) {
						message = '404 Route not found';
					}
					reject({
						data: errors.data,
						message: errors.data.message || errors.data.detail || message
					});
				});
			});
		}
	};
}]);

function baseUrl(apiUrl) {
	//var protocol = window.location.protocol;
	//var baseUrl = (window.location.hostname === 'localhost') ? protocol + '//' + 'localhost:9000' : protocol + '//' + '130.211.224.61:8010';

	return '/adminapi/' + apiUrl;
}

function prefix(item) {
	var hostname = window.location.hostname;
	var prefix;
	switch (hostname) {
		case 'localhost':
		case 'local.rtiguru.com':
			prefix = 'localAdmin';
			break;

		default:
			prefix = 'prodAdmin';
	}
	return localStorage.getItem(prefix + '.' + item);
}
'use strict';

mimicTrading.factory('settings', ['$rootScope', function ($rootScope) {
    // supported languages
    var settings = {
        layout: {
            pageSidebarClosed: false, // sidebar menu state
            pageContentWhite: true, // set page content layout
            pageBodySolid: false, // solid body color state
            pageAutoScrollOnLoad: 1000, // auto scroll to top on page load
            hideLoginForm: false // auto scroll to top on page load
        },
        assetsPath: '../assets',
        globalPath: '../assets/global',
        layoutPath: '../assets/layouts/layout3',
        errorContainer: '.error_waraper_div',
        tableContainer: '.table-container'
    };

    $rootScope.settings = settings;

    return settings;
}]);
//# sourceMappingURL=../maps/admin.app.min.js.map
